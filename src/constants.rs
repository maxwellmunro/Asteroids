pub mod window {
    pub const TITLE: &str = "Asteroids";
    pub const WRAPPING_VALS: [[i32; 2]; 9] = [
        [0, 0],
        [-1, 0],
        [1, 0],
        [0, -1],
        [0, 1],
        [-1, -1],
        [-1, 1],
        [1, -1],
        [1, 1],
    ];
}

pub mod player {
    pub const TURN_SPEED: f32 = 7.0;
    pub const ACCELERATION: f32 = 1000.0;
    pub const DECELERATION: f32 = 1.0;
    pub const PLAYER_SHAPE: [[f32; 2]; 4] = [[0.0, -40.0], [15.0, 15.0], [0.0, 0.0], [-15.0, 15.0]];
    pub const START_LIVES: u32 = 3;
    pub const POINTS_PER_LIFE: u64 = 1000;
}

pub mod particle {
    pub const MIN_LIFESPAN: u64 = 300;
    pub const MAX_LIFESPAN: u64 = 1000;
    pub mod thrust {
        use std::ops::Range;

        pub const PARTICLES_PER_SECOND: f32 = 100.0;
        pub const VEL_RANGE: Range<f32> = 300.0..500.0;
        pub const ANGLE_OFFSET: f32 = 0.5;
    }

    pub mod bullet {
        use std::ops::Range;

        pub const PARTICLES_PER_SECOND: f32 = 100.0;
        pub const VEL_RANGE: Range<f32> = 50.0..100.0;
        pub const ANGLE_OFFSET: f32 = 0.2;
    }

    pub mod explosion {
        use std::ops::Range;

        pub const COUNT_RANGE: Range<u32> = 50..100;
        pub const VEL_RANGE: Range<f32> = 10.0..150.0;
    }
}

pub mod bullet {
    pub const VEL: f32 = 1000.0;
    pub const LIFESPAN: u64 = 1000;
}

pub mod asteroid {
    use std::ops::Range;

    pub const MIN_RADIUS: f32 = 15.0;
    pub const SPAWN_RADIUS_RANGE: Range<f64> = 50.0..100.0;
    pub const RADIUS_OFFSET_FAC: f32 = 0.4;
    pub const POINTS_PER_RADIUS: f32 = 0.2;
    pub const VEL_RANGE: Range<f32> = 10.0..50.0;
    pub const SPAWN_RATE: f32 = 0.005;
    pub const MAX_SPAWN_ATTEMPTS: u32 = 10;
    pub const MIN_SPAWN_DISTANCE: f32 = 500.0 * 500.0;
    pub const SCORE_PER_RADIUS: f32 = 100.0;
    pub const MAX_ASTEROIDS: u32 = 30;
}

pub mod font {
    pub const FONT_SIZE: u32 = 30;
    pub const MARGIN: u32 = 15;
    pub const NUMBERS: [&[[(f32, f32); 2]]; 10] = [
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
            [(0.0, 0.0), (0.0, 2.0)],
        ],
        &[
            [(1.0, 0.0), (1.0, 2.0)]
        ],
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 1.0)],
            [(1.0, 1.0), (0.0, 1.0)],
            [(0.0, 1.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(1.0, 1.0), (0.0, 1.0)],
            [(1.0, 2.0), (0.0, 2.0)],
        ],
        &[
            [(0.0, 0.0), (0.0, 1.0)],
            [(0.0, 1.0), (1.0, 1.0)],
            [(1.0, 0.0), (1.0, 2.0)],
        ],
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 0.0), (0.0, 1.0)],
            [(0.0, 1.0), (1.0, 1.0)],
            [(1.0, 1.0), (1.0, 2.0)],
            [(1.0, 2.0), (0.0, 2.0)],
        ],
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 1.0), (1.0, 1.0)],
            [(1.0, 1.0), (1.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 2.0)],
        ],
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 1.0), (1.0, 1.0)],
        ],
        &[
            [(0.0, 0.0), (0.0, 1.0)],
            [(0.0, 1.0), (1.0, 1.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.0)],
        ]
    ];

    pub const LETTERS: [&[[(f32, f32); 2]]; 26] = [
        // A
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 1.0), (1.0, 1.0)],
        ],
        // B
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.25)],
            [(1.0, 0.25), (0.0, 1.0)],
            [(0.0, 1.0), (1.0, 1.25)],
            [(1.0, 1.25), (0.0, 2.0)],
        ],
        // C
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
        // D
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.5)],
            [(1.0, 0.5), (1.0, 1.5)],
            [(1.0, 1.5), (0.0, 2.0)],
        ],
        // E
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 1.0), (0.75, 1.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
        // F
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 1.0), (0.75, 1.0)],
        ],
        // G
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
            [(1.0, 1.0), (1.0, 2.0)],
            [(0.5, 1.0), (1.0, 1.0)],
        ],
        // H
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 1.0), (1.0, 1.0)],
        ],
        // I
        &[
            [(0.5, 0.0), (0.5, 2.0)],
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
        // J
        &[
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.5, 0.0), (1.0, 0.0)],
            [(0.0, 0.5), (0.5, 0.0)],
        ],
        // K
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 1.0), (1.0, 0.0)],
            [(0.0, 1.0), (1.0, 2.0)],
        ],
        // L
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
        // M
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 0.0), (0.5, 2.0)],
            [(0.5, 2.0), (1.0, 0.0)],
        ],
        // N
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(1.0, 0.0), (1.0, 2.0)],
            [(0.0, 0.0), (1.0, 2.0)],
        ],
        // O
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
            [(1.0, 2.0), (1.0, 0.0)],
            [(1.0, 0.0), (0.0, 0.0)],
        ],
        // P
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 1.0)],
            [(1.0, 1.0), (0.0, 1.0)],
        ],
        // Q
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
            [(1.0, 2.0), (1.0, 0.0)],
            [(1.0, 0.0), (0.0, 0.0)],
            [(0.5, 1.0), (1.0, 0.0)],
        ],
        // R
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (1.0, 1.0)],
            [(1.0, 1.0), (0.0, 1.0)],
            [(0.0, 1.0), (1.0, 2.0)],
        ],
        // S
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.0, 0.0), (0.0, 1.0)],
            [(0.0, 1.0), (1.0, 1.0)],
            [(1.0, 1.0), (1.0, 2.0)],
            [(1.0, 2.0), (0.0, 2.0)],
        ],
        // T
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(0.5, 0.0), (0.5, 2.0)],
        ],
        // U
        &[
            [(0.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
            [(1.0, 2.0), (1.0, 0.0)],
        ],
        // V
        &[
            [(0.0, 0.0), (0.5, 2.0)],
            [(0.5, 2.0), (1.0, 0.0)],
        ],
        // W
        &[
            [(0.0, 0.0), (0.25, 2.0)],
            [(0.25, 2.0), (0.5, 0.0)],
            [(0.5, 0.0), (0.75, 2.0)],
            [(0.75, 2.0), (1.0, 0.0)],
        ],
        // X
        &[
            [(0.0, 0.0), (1.0, 2.0)],
            [(1.0, 0.0), (0.0, 2.0)],
        ],
        // Y
        &[
            [(0.0, 0.0), (0.5, 1.0)],
            [(1.0, 0.0), (0.5, 1.0)],
            [(0.5, 1.0), (0.5, 2.0)],
        ],
        // Z
        &[
            [(0.0, 0.0), (1.0, 0.0)],
            [(1.0, 0.0), (0.0, 2.0)],
            [(0.0, 2.0), (1.0, 2.0)],
        ],
    ];

    pub const LIFE_CHAR: &[[(f32, f32); 2]] = &[
        [(0.0, 2.0), (0.5, 0.0)],
        [(0.5, 0.0), (1.0, 2.0)],
        [(0.25, 1.0), (0.75, 1.0)],
    ];
}

pub mod strings {
    pub const HIGH_SCORE_PATH: &str = "highscore.bin";
    pub const RENDER_ERROR: &str = "Error rendering game: ";
    pub const HIGH_SCORE_ERROR: &str = "Error saving high score: ";
    pub const START_TEXT: &str = "press space to start";
    pub const WINDOW_SIZE_ERROR: &str = "Window too small";
}